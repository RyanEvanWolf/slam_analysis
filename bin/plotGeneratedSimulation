#!/usr/bin/env python 


import pickle
from front_end.motion import *
import numpy as np
import matplotlib.pyplot as plt 
from front_end.motion import *
from front_end.analysis import simulationAnalyser

import argparse
import matplotlib.style as sty
from front_end.simulation import *
import os
import statistics
sty.use("seaborn")

a=simulationAnalyser("/media/ryan/EXTRA/output/Simulation")
#print(a.getSingleMotionStats(a.getMotionNames()[0]))
print(a.getGroupMotionStats())
##################
# ###plot the simulated Data statistics
# ##################

# ################
# ##-- motion profile
# ##-- Z depth profile
# ##-- ScatterPlot
# #def plotCombinedViolin

# def set_violinPlot(ax, labels, ):
#     ax.get_xaxis().set_tick_params(direction='out')
#     ax.xaxis.set_ticks_position('bottom')
#     ax.set_xticks(np.arange(1, len(labels) + 1))
#     ax.set_xticklabels(labels)
#     ax.set_xlim(0.25, len(labels) + 0.75)
#     # ax.set_xlabel('Sample name')

# def getScatterPlots(dataIn):
#     summary=getMotion(data["H"])
#     zVal=[]
#     xVal=[]
#     yVal=[]
#     z2Val=[]
#     x2Val=[]
#     y2Val=[]
#     for pt in data["Points"]:
#         zVal.append(pt["Xa"][2,0])
#         xVal.append(pt["Xa"][0,0])
#         yVal.append(pt["Xa"][1,0])
#         z2Val.append(pt["Xb"][2,0])
#         x2Val.append(pt["Xb"][0,0])
#         y2Val.append(pt["Xb"][1,0])
#     fig,(ax1,ax2,ax3)=plt.subplots(3,1)
#     ax1.plot(xVal,zVal,'ro')
#     ax1.plot(x2Val,z2Val,'bo')
#     ax1.set_xlabel("X")
#     ax1.set_ylabel("Z")

#     ax2.plot(xVal,yVal,'ro')
#     ax2.plot(x2Val,y2Val,'bo')
#     ax2.set_xlabel("X")
#     ax2.set_ylabel("Y")


#     ax3.plot(zVal,yVal,'ro')
#     ax3.plot(z2Val,y2Val,'bo')
#     ax3.set_xlabel("Z")
#     ax3.set_ylabel("Y")
#     return fig,ax1,ax2,ax3


# def getMotionViolin(worldFiles):
#     yaw=[]
#     roll=[]
#     pitch=[]
#     zz=[]
#     xx=[]
#     yy=[]

#     for Hpickle in worldFilesSet:
#         f=open(args.root_dir+"/"+args.worldFolder+"/"+Hpickle,"r")
#         data=pickle.load(f)
#         f.close()
#         summ=getMotion(data["H"])
#         yaw.append(summ["Yaw"])
#         roll.append(summ["Roll"])
#         pitch.append(summ["Pitch"])
#         xx.append(summ["X"])
#         yy.append(summ["Y"])
#         zz.append(summ["Z"])

#     stdDev=[statistics.stdev(roll),statistics.stdev(pitch),statistics.stdev(yaw),
#             statistics.stdev(xx),statistics.stdev(yy),statistics.stdev(zz)]
#     mx=[max(roll),max(pitch),max(yaw),
#         max(xx),max(yy),max(zz)]
#     mn=[min(roll),min(pitch),min(yaw),
#         min(xx),min(yy),min(zz)]
#     av=[statistics.mean(roll),statistics.mean(pitch),statistics.mean(yaw),
#         statistics.mean(xx),statistics.mean(yy),statistics.mean(zz)]
#     fig,(ax1,ax2)=plt.subplots(1,2)
#     fig.suptitle("Summary of synthetic motion conditions for dominant forward translation")
#     ##############draw translation
#     ax2.violinplot([xx,yy,zz],[1,2,3], showmeans=False, showextrema=False, showmedians=True)
#     ax2.errorbar([1,1],[mn[3],mx[3]],xerr=0.15,color='black')#[stdDev[0],stdDev[1],stdDev[2]])
#     ax2.errorbar([1,1],[av[3]+stdDev[3],av[3]-stdDev[3]],xerr=0.15,color='black')
#     ax2.errorbar([2,2],[mn[4],mx[4]],xerr=0.15,color='black')#[stdDev[0],stdDev[1],stdDev[2]])
#     ax2.errorbar([2,2],[av[4]+stdDev[4],av[4]-stdDev[4]],xerr=0.15,color='black')
#     ax2.errorbar([3,3],[mn[5],mx[5]],xerr=0.15,color='black')#[stdDev[0],stdDev[1],stdDev[2]])
#     ax2.errorbar([3,3],[av[5]+stdDev[5],av[5]-stdDev[5]],xerr=0.15,color='black')
#     set_violinPlot(ax2,["X","Y","Z"])
#     ax2.set_ylabel("Translation (m)")



#     #############draw rotation
#     ax1.violinplot([roll,pitch,yaw],[1,2,3], showmeans=False, showextrema=False, showmedians=True)
#     ax1.errorbar([1,1],[mn[0],mx[0]],xerr=0.15,color='black')#[stdDev[0],stdDev[1],stdDev[2]])
#     ax1.errorbar([1,1],[av[0]+stdDev[0],av[0]-stdDev[0]],xerr=0.15,color='black')
#     ax1.errorbar([2,2],[mn[1],mx[1]],xerr=0.15,color='black')#[stdDev[0],stdDev[1],stdDev[2]])
#     ax1.errorbar([2,2],[av[1]+stdDev[1],av[1]-stdDev[1]],xerr=0.15,color='black')
#     ax1.errorbar([3,3],[mn[2],mx[2]],xerr=0.15,color='black')#[stdDev[0],stdDev[1],stdDev[2]])
#     ax1.errorbar([3,3],[av[2]+stdDev[2],av[2]-stdDev[2]],xerr=0.15,color='black')
#     set_violinPlot(ax1,["Roll","Pitch","Yaw"])
#     ax1.set_ylabel("Angle (deg)")

#     return fig,ax1,ax2

# parser =argparse.ArgumentParser()
# parser.add_argument("worldFolder")
# parser.add_argument("--root_dir",default="/media/ryan/EXTRA/output/Simulation",type=str)
# args,unknown=parser.parse_known_args()

# d=simDirectory(args.root_dir)
# motion,camera,nister=d.getSettings()
# worldFilesSet=os.listdir(args.root_dir+"/"+args.worldFolder)
# # print(len(worldFilesSet))
# getMotionViolin(args.root_dir+"/"+args.worldFolder+worldFilesSet[0])

# data=pickle.load(open(args.root_dir+"/"+args.worldFolder+"/"+worldFilesSet[0],"r"))

# getScatterPlots(data)
# plt.show()

